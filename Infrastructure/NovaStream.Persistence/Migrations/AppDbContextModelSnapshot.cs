// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NovaStream.Persistence.Data.Contexts;

#nullable disable

namespace NovaStream.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yaxshi Oglan",
                            Name = "Cillian",
                            Surname = "Murphy"
                        },
                        new
                        {
                            Id = 2,
                            About = "Babat Oglan",
                            Name = "Tom",
                            Surname = "Cruse"
                        },
                        new
                        {
                            Id = 3,
                            About = "Zor Oglan",
                            Name = "Brad",
                            Surname = "Pitt"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieActor", b =>
                {
                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("MovieName", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");

                    b.HasData(
                        new
                        {
                            MovieName = "Interstellar",
                            ActorId = 2
                        },
                        new
                        {
                            MovieName = "Interstellar",
                            ActorId = 3
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieCategory", b =>
                {
                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("MovieName", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MovieCategories");

                    b.HasData(
                        new
                        {
                            MovieName = "Interstellar",
                            CategoryId = 1
                        },
                        new
                        {
                            MovieName = "Interstellar",
                            CategoryId = 4
                        },
                        new
                        {
                            MovieName = "Interstellar",
                            CategoryId = 5
                        },
                        new
                        {
                            MovieName = "Interstellar",
                            CategoryId = 6
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieMark", b =>
                {
                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MovieName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieMarks");

                    b.HasData(
                        new
                        {
                            MovieName = "Interstellar",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialActor", b =>
                {
                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("SerialName", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("SerialActors");

                    b.HasData(
                        new
                        {
                            SerialName = "Peaky Blinders",
                            ActorId = 1
                        },
                        new
                        {
                            SerialName = "Peaky Blinders",
                            ActorId = 2
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialCategory", b =>
                {
                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("SerialName", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SerialCategories");

                    b.HasData(
                        new
                        {
                            SerialName = "Peaky Blinders",
                            CategoryId = 1
                        },
                        new
                        {
                            SerialName = "Peaky Blinders",
                            CategoryId = 2
                        },
                        new
                        {
                            SerialName = "Peaky Blinders",
                            CategoryId = 3
                        },
                        new
                        {
                            SerialName = "Wednesday",
                            CategoryId = 9
                        },
                        new
                        {
                            SerialName = "Wednesday",
                            CategoryId = 10
                        },
                        new
                        {
                            SerialName = "Wednesday",
                            CategoryId = 11
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialMark", b =>
                {
                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SerialName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SerialMarks");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SoonCategory", b =>
                {
                    b.Property<string>("SoonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("SoonName", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SoonCategories");

                    b.HasData(
                        new
                        {
                            SoonName = "John Wick: Chapter 4",
                            CategoryId = 2
                        },
                        new
                        {
                            SoonName = "John Wick: Chapter 4",
                            CategoryId = 7
                        },
                        new
                        {
                            SoonName = "John Wick: Chapter 4",
                            CategoryId = 8
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Comedy horror"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Coming-of-age"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Supernatural"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ambitious gang leader Thomas Shelby recognizes an opportunity to move up in the world thanks to a missing crate of guns.",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2FSeason%201%2FEpisode%201%2Fpeaky-blinders-S01E01-image.jpg?alt=media&token=10d57b41-f838-4110-acf7-63f8c01abebf",
                            Name = "1. Episode 1",
                            Number = 1,
                            SeasonId = 1,
                            VideoUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2FSeason%201%2FEpisode%201%2Fpeaky-blinders-S01E01-video.mp4?alt=media&token=1ddc4b67-579d-4081-ae49-aea3c95b9402"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thomas provokes a local kingpin by fixing a horse race and starts a war with a gypsy family; Inspector Campbell carries out a vicious raid.",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2FSeason%201%2FEpisode%202%2Fpeaky-blinders-S01E02-image.jpg?alt=media&token=7e07da2d-90b7-443e-b72a-088ebf61e2a3",
                            Name = "2. Episode 2",
                            Number = 2,
                            SeasonId = 1,
                            VideoUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2FSeason%201%2FEpisode%202%2Fpeaky-blinders-S01E02-video.mp4?alt=media&token=c41cfa67-da90-4ee4-86af-7d5264617a69"
                        },
                        new
                        {
                            Id = 3,
                            Description = "When Birmingham crime boss Tommy Shelby's beloved Garrison pub is bombed, he finds himself blackmailed into murdering an Irish dissident.",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2FSeason%202%2FEpisode%201%2Fpeaky-blinders-S02E01-image.jpg?alt=media&token=acc1de8b-c971-41ee-9b0d-fff713ce484c",
                            Name = "1. Episode 1",
                            Number = 1,
                            SeasonId = 2,
                            VideoUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2FSeason%202%2FEpisode%201%2Fpeaky-blinders-S02E01-video.mp4?alt=media&token=1be97130-46ef-43d6-a195-c8e2e7d107d6"
                        },
                        new
                        {
                            Id = 4,
                            Description = "When a deliciously wicked prank gets Wednesday expelled, her parents ship her off to Nevermore Academy, the boarding school where they fell in love.",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2FSeason%201%2FEpisode%201%2Fwednesday-S01E01-image.jpg?alt=media&token=1a5b46ae-7cf3-46a0-994e-3b6072f36e43",
                            Name = "1. Wednesday's Child Is Full of Woe",
                            Number = 1,
                            SeasonId = 3,
                            VideoUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2FSeason%201%2Fwednesday-S01E01-video.mkv?alt=media&token=ac3169c1-7e09-46f4-baa9-cad6e290244b"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The sheriff questions Wednesday about the night's strange happenings. Later, Wednesday faces off against a fierce rival in the cutthroat Poe Cup race.",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2FSeason%201%2FEpisode%202%2Fwednesday-S01E02-image.jpg?alt=media&token=a387f24e-4dfb-4cd8-8381-1707b941ad2f",
                            Name = "2. Woe Is the Loneliest Number",
                            Number = 2,
                            SeasonId = 3,
                            VideoUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2FSeason%201%2Fwednesday-S01E02-video.mkv?alt=media&token=3fdc19c2-224e-4c06-afda-c7d5fd1e2db1"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Movie", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<string>("SearchImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("ProducerId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Name = "Interstellar",
                            Age = 13,
                            Description = "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival. Earth's future has been riddled by disasters, famines, and droughts. There is only one way to ensure mankind's survival: Interstellar travel.",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Movies%2FInterstellar%2Finterstellar-image.jpg?alt=media&token=0015bcdb-c50b-4b4b-a86f-ee3c1a5efc8e",
                            ProducerId = 2,
                            SearchImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Movies%2FInterstellar%2Finterstellar-search-image.jpg?alt=media&token=5799d5f0-f87d-424c-9c62-b0ba5904f499",
                            TrailerImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Movies%2FInterstellar%2Finterstellar-trailer-image.jpg?alt=media&token=1da9a664-0a92-4e35-90d9-7905fd33dfdf",
                            TrailerUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Movies%2FInterstellar%2Finterstellar-trailer.mp4?alt=media&token=3e5984d4-5fb8-438b-aa9a-3778e3f52ba8",
                            VideoDescription = "With humanity teetering on the brink of extinction, a group of astronauts travels through a wormhole in search of another inhabitable planet.",
                            VideoImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Movies%2FInterstellar%2Finterstellar-video-image.jpg?alt=media&token=5a18e02b-3976-4116-a591-d6e334c50772",
                            VideoName = "Episode",
                            VideoUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Movies%2FInterstellar%2Finterstellar-video.mp4?alt=media&token=aa6a5dca-7570-45de-87ed-22d35d25189b",
                            Year = 2014
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "zor oglan",
                            Name = "Murad",
                            Surname = "Musayev"
                        },
                        new
                        {
                            Id = 2,
                            About = "zor oglan",
                            Name = "Parvin",
                            Surname = "Aliyev"
                        },
                        new
                        {
                            Id = 3,
                            About = "zor oglan",
                            Name = "Rustem",
                            Surname = "Bayramov"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SerialName");

                    b.ToTable("Seasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 1,
                            SerialName = "Peaky Blinders"
                        },
                        new
                        {
                            Id = 2,
                            Number = 2,
                            SerialName = "Peaky Blinders"
                        },
                        new
                        {
                            Id = 3,
                            Number = 1,
                            SerialName = "Wednesday"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Serial", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<string>("SearchImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("ProducerId");

                    b.ToTable("Serials");

                    b.HasData(
                        new
                        {
                            Name = "Peaky Blinders",
                            Age = 18,
                            Description = "A notorious gang in 1919 Birmingham, England, is led by the fierce Tommy Shelby, a crime boss set on moving up in the world no matter the cost.",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2Fpeaky-blinders-image.jpg?alt=media&token=356b23bd-755e-4daf-822e-50a029c87f9c",
                            ProducerId = 1,
                            SearchImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2Fpeaky-blinders-search-image.jpg?alt=media&token=8ea5abb6-b969-4bf4-a20a-13ffcd3a07fd",
                            TrailerImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2Fpeaky-blinders-trailer-image.jpg?alt=media&token=a99966d3-1793-4cac-97fc-80b9b75686f0",
                            TrailerUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FPeaky%20Blinders%2Fpeaky-blinders-trailer.mp4?alt=media&token=c5e7aef9-cfcf-4a31-8e77-8c678d95bd7b",
                            Year = 2013
                        },
                        new
                        {
                            Name = "Wednesday",
                            Age = 14,
                            Description = "Follows Wednesday Addams' years as a student, when she attempts to master her emerging psychic ability, thwart and solve the mystery that embroiled her parents.",
                            ImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2Fwednesday-image.jpg?alt=media&token=54703ac5-97e4-48fb-929b-3b7c57759764",
                            ProducerId = 3,
                            SearchImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2Fwednesday-search-image.jpg?alt=media&token=ea516245-d4a0-4649-8c67-68bc39cbda9b",
                            TrailerImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2Fwednesday-trailer-image.jpg?alt=media&token=6763d2c7-2994-46ff-9d61-45956081e0d4",
                            TrailerUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2Fwednesday-trailer.mp4?alt=media&token=cd22789d-43ef-477d-bf5d-442adee817f0",
                            Year = 2022
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Soon", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrailerImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Soons");

                    b.HasData(
                        new
                        {
                            Name = "John Wick: Chapter 4",
                            Description = "John Wick uncovers a path to defeating The High Table. But before he can earn his freedom, Wick must face off against a new enemy with powerful alliances across the globe and forces that turn old friends into foes.",
                            OutDate = new DateTime(2023, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrailerImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Soons%2FJohn%20Wick%3A%20Chapter%204%2Fjohn-wick-chapter-4-trailer-image.jpg?alt=media&token=410d8c6b-fe9c-4da4-a654-1980eb72c78e",
                            TrailerUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Soons%2FJohn%20Wick%3A%20Chapter%204%2Fjohn-wick-chapter-4-trailer.mp4?alt=media&token=2c1e4eea-4a4f-4e00-add3-eb10b9dd5030"
                        },
                        new
                        {
                            Name = "Wednesday: Season 2",
                            Description = "Smart, sarcastic and a little dead inside, Wednesday Addams investigates a murder spree while making new friends — and foes — at Nevermore Academy.",
                            OutDate = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrailerImageUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2Fwednesday-trailer-image.jpg?alt=media&token=6763d2c7-2994-46ff-9d61-45956081e0d4",
                            TrailerUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2Fwednesday-trailer.mp4?alt=media&token=cd22789d-43ef-477d-bf5d-442adee817f0"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Avatars%2Favatar-1.png?alt=media&token=4fecc3bf-9511-4186-9c25-0347128c0181",
                            Email = "admin@novastream.api",
                            Nickname = "Admin",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieActor", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieCategory", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Category", "Category")
                        .WithMany("MovieCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Categories")
                        .HasForeignKey("MovieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieMark", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Marks")
                        .HasForeignKey("MovieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.User", "User")
                        .WithMany("MovieMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialActor", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Actor", "Actor")
                        .WithMany("Serials")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Actors")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialCategory", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Category", "Category")
                        .WithMany("SerialCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Categories")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialMark", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Marks")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.User", "User")
                        .WithMany("SerialMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serial");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SoonCategory", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Category", "Category")
                        .WithMany("SoonCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Soon", "Soon")
                        .WithMany("Categories")
                        .HasForeignKey("SoonName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Soon");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Episode", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Season");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Movie", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Producer", "Producer")
                        .WithMany("Movies")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Season", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Seasons")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Serial", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Producer", "Producer")
                        .WithMany("Serials")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Actor", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Serials");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Category", b =>
                {
                    b.Navigation("MovieCategories");

                    b.Navigation("SerialCategories");

                    b.Navigation("SoonCategories");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Movie", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Categories");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Producer", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Serials");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Serial", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Categories");

                    b.Navigation("Marks");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Soon", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.User", b =>
                {
                    b.Navigation("MovieMarks");

                    b.Navigation("SerialMarks");
                });
#pragma warning restore 612, 618
        }
    }
}
