// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NovaStream.Persistence.Data.Contexts;

#nullable disable

namespace NovaStream.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230123180126_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yaxshi Oglan",
                            ImageUrl = "baza",
                            Name = "Cillian",
                            Surname = "Murphy"
                        },
                        new
                        {
                            Id = 2,
                            About = "Babat Oglan",
                            ImageUrl = "baza",
                            Name = "Tom",
                            Surname = "Cruse"
                        },
                        new
                        {
                            Id = 3,
                            About = "Zor Oglan",
                            ImageUrl = "baza",
                            Name = "Brad",
                            Surname = "Pitt"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieActor", b =>
                {
                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("MovieName", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");

                    b.HasData(
                        new
                        {
                            MovieName = "Interstellar",
                            ActorId = 2
                        },
                        new
                        {
                            MovieName = "Interstellar",
                            ActorId = 3
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieGenre", b =>
                {
                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieName", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            MovieName = "Interstellar",
                            GenreId = 1
                        },
                        new
                        {
                            MovieName = "Interstellar",
                            GenreId = 4
                        },
                        new
                        {
                            MovieName = "Interstellar",
                            GenreId = 5
                        },
                        new
                        {
                            MovieName = "Interstellar",
                            GenreId = 6
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieMark", b =>
                {
                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MovieName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieMarks");

                    b.HasData(
                        new
                        {
                            MovieName = "Interstellar",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialActor", b =>
                {
                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("SerialName", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("SerialActors");

                    b.HasData(
                        new
                        {
                            SerialName = "Peaky Blinders",
                            ActorId = 1
                        },
                        new
                        {
                            SerialName = "Peaky Blinders",
                            ActorId = 2
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialGenre", b =>
                {
                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("SerialName", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SerialGenres");

                    b.HasData(
                        new
                        {
                            SerialName = "Peaky Blinders",
                            GenreId = 1
                        },
                        new
                        {
                            SerialName = "Peaky Blinders",
                            GenreId = 2
                        },
                        new
                        {
                            SerialName = "Peaky Blinders",
                            GenreId = 3
                        },
                        new
                        {
                            SerialName = "Wednesday",
                            GenreId = 9
                        },
                        new
                        {
                            SerialName = "Wednesday",
                            GenreId = 10
                        },
                        new
                        {
                            SerialName = "Wednesday",
                            GenreId = 11
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialMark", b =>
                {
                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SerialName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SerialMarks");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SoonGenre", b =>
                {
                    b.Property<string>("SoonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("SoonName", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SoonGenres");

                    b.HasData(
                        new
                        {
                            SoonName = "John Wick: Chapter 4",
                            GenreId = 2
                        },
                        new
                        {
                            SoonName = "John Wick: Chapter 4",
                            GenreId = 7
                        },
                        new
                        {
                            SoonName = "John Wick: Chapter 4",
                            GenreId = 8
                        },
                        new
                        {
                            SoonName = "Guardians of the Galaxy Vol. 3",
                            GenreId = 7
                        },
                        new
                        {
                            SoonName = "Guardians of the Galaxy Vol. 3",
                            GenreId = 4
                        },
                        new
                        {
                            SoonName = "Guardians of the Galaxy Vol. 3",
                            GenreId = 12
                        },
                        new
                        {
                            SoonName = "Transformers: Rise of the Beasts",
                            GenreId = 7
                        },
                        new
                        {
                            SoonName = "Transformers: Rise of the Beasts",
                            GenreId = 4
                        },
                        new
                        {
                            SoonName = "Transformers: Rise of the Beasts",
                            GenreId = 13
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Ambitious gang leader Thomas Shelby recognizes an opportunity to move up in the world thanks to a missing crate of guns.",
                            ImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Peaky Blinders/Season 1/Episode 1/peaky-blinders-S01E01-video-image",
                            Name = "1. Episode 1",
                            Number = 1,
                            SeasonId = 1,
                            VideoUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Peaky Blinders/Season 1/Episode 1/peaky-blinders-S01E01-video.mp4"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Thomas provokes a local kingpin by fixing a horse race and starts a war with a gypsy family; Inspector Campbell carries out a vicious raid.",
                            ImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Peaky Blinders/Season 1/Episode 2/peaky-blinders-S01E02-video-image",
                            Name = "2. Episode 2",
                            Number = 2,
                            SeasonId = 1,
                            VideoUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Peaky Blinders/Season 1/Episode 2/peaky-blinders-S01E02-video.mp4"
                        },
                        new
                        {
                            Id = 3,
                            Description = "When Birmingham crime boss Tommy Shelby's beloved Garrison pub is bombed, he finds himself blackmailed into murdering an Irish dissident.",
                            ImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Peaky Blinders/Season 2/Episode 1/peaky-blinders-S02E01-video-image",
                            Name = "1. Episode 1",
                            Number = 1,
                            SeasonId = 2,
                            VideoUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Peaky Blinders/Season 2/Episode 1/peaky-blinders-S02E01-video.mp4"
                        },
                        new
                        {
                            Id = 4,
                            Description = "When a deliciously wicked prank gets Wednesday expelled, her parents ship her off to Nevermore Academy, the boarding school where they fell in love.",
                            ImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Wednesday/Season 1/Episode 1/wednesday-S01E01-video-image",
                            Name = "1. Wednesday's Child Is Full of Woe",
                            Number = 1,
                            SeasonId = 3,
                            VideoUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2FSeason%201%2Fwednesday-S01E01-video.mkv?alt=media&token=ac3169c1-7e09-46f4-baa9-cad6e290244b"
                        },
                        new
                        {
                            Id = 5,
                            Description = "The sheriff questions Wednesday about the night's strange happenings. Later, Wednesday faces off against a fierce rival in the cutthroat Poe Cup race.",
                            ImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Wednesday/Season 1/Episode 2/wednesday-S01E02-video-image",
                            Name = "2. Woe Is the Loneliest Number",
                            Number = 2,
                            SeasonId = 3,
                            VideoUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-a8167.appspot.com/o/Serials%2FWednesday%2FSeason%201%2Fwednesday-S01E02-video.mkv?alt=media&token=3fdc19c2-224e-4c06-afda-c7d5fd1e2db1"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "baza",
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "baza",
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "baza",
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "baza",
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "baza",
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "baza",
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "baza",
                            Name = "Action"
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "baza",
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 9,
                            ImageUrl = "baza",
                            Name = "Comedy horror"
                        },
                        new
                        {
                            Id = 10,
                            ImageUrl = "baza",
                            Name = "Coming-of-age"
                        },
                        new
                        {
                            Id = 11,
                            ImageUrl = "baza",
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 12,
                            ImageUrl = "baza",
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 13,
                            ImageUrl = "baza",
                            Name = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Movie", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<string>("SearchImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("ProducerId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Name = "Interstellar",
                            Age = 13,
                            Description = "A team of explorers travel through a wormhole in space in an attempt to ensure humanity's survival. Earth's future has been riddled by disasters, famines, and droughts. There is only one way to ensure mankind's survival: Interstellar travel.",
                            ImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Movies/Interstellar/interstellar-image",
                            ProducerId = 2,
                            SearchImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Movies/Interstellar/interstellar-search-image",
                            TrailerUrl = "https://novastreamstorage.blob.core.windows.net/root/Movies/Interstellar/interstellar-trailer",
                            VideoDescription = "With humanity teetering on the brink of extinction, a group of astronauts travels through a wormhole in search of another inhabitable planet.",
                            VideoImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Movies/Interstellar/interstellar-video-image",
                            VideoName = "Episode",
                            VideoUrl = "https://novastreamstorage.blob.core.windows.net/root/Movies/Interstellar/interstellar-video",
                            Year = 2014
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "zor oglan",
                            ImageUrl = "baza",
                            Name = "Murad",
                            Surname = "Musayev"
                        },
                        new
                        {
                            Id = 2,
                            About = "zor oglan",
                            ImageUrl = "baza",
                            Name = "Parvin",
                            Surname = "Aliyev"
                        },
                        new
                        {
                            Id = 3,
                            About = "zor oglan",
                            ImageUrl = "baza",
                            Name = "Rustem",
                            Surname = "Bayramov"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SerialName");

                    b.ToTable("Seasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 1,
                            SerialName = "Peaky Blinders"
                        },
                        new
                        {
                            Id = 2,
                            Number = 2,
                            SerialName = "Peaky Blinders"
                        },
                        new
                        {
                            Id = 3,
                            Number = 1,
                            SerialName = "Wednesday"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Serial", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<string>("SearchImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("ProducerId");

                    b.ToTable("Serials");

                    b.HasData(
                        new
                        {
                            Name = "Peaky Blinders",
                            Age = 18,
                            Description = "A notorious gang in 1919 Birmingham, England, is led by the fierce Tommy Shelby, a crime boss set on moving up in the world no matter the cost.",
                            ImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Peaky Blinders/peaky-blinders-image",
                            ProducerId = 1,
                            SearchImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Peaky Blinders/peaky-blinders-search-image",
                            TrailerUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Peaky Blinders/peaky-blinders-trailer",
                            Year = 2013
                        },
                        new
                        {
                            Name = "Wednesday",
                            Age = 14,
                            Description = "Follows Wednesday Addams' years as a student, when she attempts to master her emerging psychic ability, thwart and solve the mystery that embroiled her parents.",
                            ImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Wednesday/wednesday-image",
                            ProducerId = 3,
                            SearchImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Wednesday/wednesday-search-image",
                            TrailerUrl = "https://novastreamstorage.blob.core.windows.net/root/Serials/Wednesday/wednesday-trailer",
                            Year = 2022
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Soon", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrailerImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Soons");

                    b.HasData(
                        new
                        {
                            Name = "John Wick: Chapter 4",
                            Description = "John Wick uncovers a path to defeating The High Table. But before he can earn his freedom, Wick must face off against a new enemy with powerful alliances across the globe and forces that turn old friends into foes.",
                            OutDate = new DateTime(2023, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrailerImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Soons/John Wick Chapter 4/john-wick-chapter-4-trailer-image",
                            TrailerUrl = "https://novastreamstorage.blob.core.windows.net/root/Soons/John Wick Chapter 4/john-wick-chapter-4-trailer"
                        },
                        new
                        {
                            Name = "Guardians of the Galaxy Vol. 3",
                            Description = "Still reeling from the loss of Gamora, Peter Quill rallies his team to defend the universe and one of their own - a mission that could mean the end of the Guardians if not successful.",
                            OutDate = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrailerImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Soons/Guardians of the Galaxy Vol. 3/guardians-of-the-galaxy-vol-3-trailer-image",
                            TrailerUrl = "https://novastreamstorage.blob.core.windows.net/root/Soons/Guardians of the Galaxy Vol. 3/guardians-of-the-galaxy-vol-3-trailer"
                        },
                        new
                        {
                            Name = "Transformers: Rise of the Beasts",
                            Description = "Plot unknown. Reportedly based on the 'Transformers' spinoff 'Beast Wars' which feature robots that transform into robotic animals.",
                            OutDate = new DateTime(2023, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrailerImageUrl = "https://novastreamstorage.blob.core.windows.net/root/Soons/Transformers Rise of the Beasts/transformers-rise-of-the-beasts-trailer-image",
                            TrailerUrl = "https://novastreamstorage.blob.core.windows.net/root/Soons/Transformers Rise of the Beasts/transformers-rise-of-the-beasts-trailer"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarUrl = "https://novastreamstorage.blob.core.windows.net/root/Avatars/avatar-1",
                            Email = "admin@novastream.api",
                            Nickname = "Admin",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieActor", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieGenre", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieMark", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Marks")
                        .HasForeignKey("MovieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.User", "User")
                        .WithMany("MovieMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialActor", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Actor", "Actor")
                        .WithMany("Serials")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Actors")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialGenre", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Genre", "Genre")
                        .WithMany("SerialGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Genres")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialMark", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Marks")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.User", "User")
                        .WithMany("SerialMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serial");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SoonGenre", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Genre", "Genre")
                        .WithMany("SoonGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Soon", "Soon")
                        .WithMany("Genres")
                        .HasForeignKey("SoonName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Soon");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Episode", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Season");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Movie", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Producer", "Producer")
                        .WithMany("Movies")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Season", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Seasons")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Serial", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Producer", "Producer")
                        .WithMany("Serials")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Actor", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Serials");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("SerialGenres");

                    b.Navigation("SoonGenres");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Movie", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Genres");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Producer", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Serials");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Serial", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Genres");

                    b.Navigation("Marks");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Soon", b =>
                {
                    b.Navigation("Genres");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.User", b =>
                {
                    b.Navigation("MovieMarks");

                    b.Navigation("SerialMarks");
                });
#pragma warning restore 612, 618
        }
    }
}
