// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NovaStream.Persistence.Data.Contexts;

#nullable disable

namespace NovaStream.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230303210552_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieActor", b =>
                {
                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("MovieName", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieGenre", b =>
                {
                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieName", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieMark", b =>
                {
                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MovieName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieMarks");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialActor", b =>
                {
                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("SerialName", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("SerialActors");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialGenre", b =>
                {
                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("SerialName", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SerialGenres");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialMark", b =>
                {
                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SerialName", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SerialMarks");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SoonGenre", b =>
                {
                    b.Property<string>("SoonName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("SoonName", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SoonGenres");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("VideoLength")
                        .HasColumnType("time");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Movie", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("VideoLength")
                        .HasColumnType("time");

                    b.Property<string>("VideoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("SerialName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SerialName");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Serial", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.HasIndex("DirectorId");

                    b.ToTable("Serials");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Soon", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrailerImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.ToTable("Soons");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldPasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-999admin.appspot.com/o/NovaStream%20Profile%20Avatar%2FA8.png?alt=media&token=c1712e32-5eaa-4808-8802-c4416ef2a3d4",
                            Email = "admin@novastream.api",
                            Nickname = "Admin",
                            OldPasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AvatarUrl = "https://firebasestorage.googleapis.com/v0/b/novastream-999admin.appspot.com/o/NovaStream%20Profile%20Avatar%2FA8.png?alt=media&token=c1712e32-5eaa-4808-8802-c4416ef2a3d4",
                            Email = "novastream.tester@gmail.com",
                            Nickname = "tyler",
                            OldPasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            PasswordHash = "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
                            Role = "Tester"
                        });
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieActor", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieGenre", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.MovieMark", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Movie", "Movie")
                        .WithMany("Marks")
                        .HasForeignKey("MovieName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.User", "User")
                        .WithMany("MovieMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialActor", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Actor", "Actor")
                        .WithMany("Serials")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Actors")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialGenre", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Genre", "Genre")
                        .WithMany("SerialGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Genres")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SerialMark", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Marks")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.User", "User")
                        .WithMany("SerialMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serial");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Adapters.SoonGenre", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Genre", "Genre")
                        .WithMany("SoonGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NovaStream.Domain.Entities.Concrete.Soon", "Soon")
                        .WithMany("Genres")
                        .HasForeignKey("SoonName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Soon");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Episode", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Season");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Movie", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Director");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Season", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Serial", "Serial")
                        .WithMany("Seasons")
                        .HasForeignKey("SerialName")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Serial");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Serial", b =>
                {
                    b.HasOne("NovaStream.Domain.Entities.Concrete.Director", "Director")
                        .WithMany("Serials")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Director");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Actor", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Serials");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Director", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Serials");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Genre", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("SerialGenres");

                    b.Navigation("SoonGenres");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Movie", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Genres");

                    b.Navigation("Marks");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Season", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Serial", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Genres");

                    b.Navigation("Marks");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.Soon", b =>
                {
                    b.Navigation("Genres");
                });

            modelBuilder.Entity("NovaStream.Domain.Entities.Concrete.User", b =>
                {
                    b.Navigation("MovieMarks");

                    b.Navigation("SerialMarks");
                });
#pragma warning restore 612, 618
        }
    }
}
